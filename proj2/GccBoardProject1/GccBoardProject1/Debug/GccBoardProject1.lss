
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f2  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041c  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d45  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00008301  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002d6  00000000  00000000  0000842b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	2f d0       	rcall	.+94     	; 0xea <main>
  8c:	70 c0       	rjmp	.+224    	; 0x16e <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <blink>:
 */
void blink(int);

/* Functions ---------------------------------------------------------*/
void blink(int number){
	PORTB ^= (1<<LED[number]);
  90:	45 b1       	in	r20, 0x05	; 5
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	fc 01       	movw	r30, r24
  98:	e0 50       	subi	r30, 0x00	; 0
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	c9 01       	movw	r24, r18
  a2:	00 80       	ld	r0, Z
  a4:	02 c0       	rjmp	.+4      	; 0xaa <blink+0x1a>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <blink+0x16>
  ae:	84 27       	eor	r24, r20
  b0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	82 e5       	ldi	r24, 0x52	; 82
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <blink+0x28>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <blink+0x32>
  c2:	00 00       	nop
	_delay_ms(DELAY); 
	PORTB ^= (1<<LED[number]);
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	00 80       	ld	r0, Z
  c8:	02 c0       	rjmp	.+4      	; 0xce <blink+0x3e>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <blink+0x3a>
  d2:	28 27       	eor	r18, r24
  d4:	25 b9       	out	0x05, r18	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	40 e7       	ldi	r20, 0x70	; 112
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	40 40       	sbci	r20, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <blink+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <blink+0x56>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <main>:

/**
 * Knight Rider LEDs
 */
int main(void)
{
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	6a e0       	ldi	r22, 0x0A	; 10
  f0:	71 e0       	ldi	r23, 0x01	; 1
	// PORTs setup (LEDs and Button)
	for(int i = 0; i < 5; i++){
		DDRB |= (1<<LED[i]);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	24 b1       	in	r18, 0x04	; 4
  f8:	df 01       	movw	r26, r30
  fa:	ca 01       	movw	r24, r20
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x1a>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x16>
 108:	82 2b       	or	r24, r18
 10a:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~(1<<LED[i]);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	32 96       	adiw	r30, 0x02	; 2
 110:	9a 01       	movw	r18, r20
 112:	0c 90       	ld	r0, X
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x30>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x2c>
 11e:	20 95       	com	r18
 120:	82 23       	and	r24, r18
 122:	85 b9       	out	0x05, r24	; 5
 * Knight Rider LEDs
 */
int main(void)
{
	// PORTs setup (LEDs and Button)
	for(int i = 0; i < 5; i++){
 124:	e6 17       	cp	r30, r22
 126:	f7 07       	cpc	r31, r23
 128:	31 f7       	brne	.-52     	; 0xf6 <main+0xc>
		DDRB |= (1<<LED[i]);
		PORTB &= ~(1<<LED[i]);
	}
	DDRD &= ~(1<<BTN);
 12a:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<BTN);
 12c:	58 9a       	sbi	0x0b, 0	; 11
	 *
	 * when inc is 1 then increase i else decrease i
	 * if i is 4 then inc changes to 0
	 * if i is 0 then inc changes to 1 
	 */
	for(int i = 0, inc = 0;; inc? i++: i--){
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	00 e0       	ldi	r16, 0x00	; 0
 134:	10 e0       	ldi	r17, 0x00	; 0
		inc = i%4?inc:(inc+1)%2;
 136:	c8 01       	movw	r24, r16
 138:	83 70       	andi	r24, 0x03	; 3
 13a:	99 27       	eor	r25, r25
 13c:	89 2b       	or	r24, r25
 13e:	59 f4       	brne	.+22     	; 0x156 <main+0x6c>
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	81 70       	andi	r24, 0x01	; 1
 146:	90 78       	andi	r25, 0x80	; 128
 148:	99 23       	and	r25, r25
 14a:	24 f4       	brge	.+8      	; 0x154 <main+0x6a>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	8e 6f       	ori	r24, 0xFE	; 254
 150:	9f 6f       	ori	r25, 0xFF	; 255
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	ec 01       	movw	r28, r24
		// If Button is pressed, then LEDs are off.
		if(bit_is_set(PIND,BTN)){
 156:	48 9b       	sbis	0x09, 0	; 9
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0x74>
			blink(i);
 15a:	c8 01       	movw	r24, r16
 15c:	99 df       	rcall	.-206    	; 0x90 <blink>
	 *
	 * when inc is 1 then increase i else decrease i
	 * if i is 4 then inc changes to 0
	 * if i is 0 then inc changes to 1 
	 */
	for(int i = 0, inc = 0;; inc? i++: i--){
 15e:	20 97       	sbiw	r28, 0x00	; 0
 160:	19 f0       	breq	.+6      	; 0x168 <main+0x7e>
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	e7 cf       	rjmp	.-50     	; 0x136 <main+0x4c>
 168:	01 50       	subi	r16, 0x01	; 1
 16a:	11 09       	sbc	r17, r1
 16c:	e4 cf       	rjmp	.-56     	; 0x136 <main+0x4c>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
