
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097d  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000713  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f3  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8e:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <blink>:
void morse_char(char);
void morse_code(char *);

/* Functions ---------------------------------------------------------*/
void blink(char charD){
	PORTB = PORTB ^ (1<<LED_GREEN);
  96:	25 b1       	in	r18, 0x05	; 5
  98:	90 e2       	ldi	r25, 0x20	; 32
  9a:	92 27       	eor	r25, r18
  9c:	95 b9       	out	0x05, r25	; 5
	if(charD == 'S')
  9e:	83 35       	cpi	r24, 0x53	; 83
  a0:	51 f4       	brne	.+20     	; 0xb6 <blink+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	83 ec       	ldi	r24, 0xC3	; 195
  a6:	99 e0       	ldi	r25, 0x09	; 9
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <blink+0x12>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <blink+0x1c>
  b2:	00 00       	nop
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <blink+0x32>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	8b e4       	ldi	r24, 0x4B	; 75
  ba:	9d e1       	ldi	r25, 0x1D	; 29
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <blink+0x26>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <blink+0x30>
  c6:	00 00       	nop
		_delay_ms(SHORT_D); // tecka
	else
		_delay_ms(LONG_D); // carka	
		
	PORTB = PORTB ^ (1<<LED_GREEN);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	89 27       	eor	r24, r25
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ec       	ldi	r24, 0xC3	; 195
  d4:	99 e0       	ldi	r25, 0x09	; 9
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <blink+0x40>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <blink+0x4a>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <morse_char>:
	_delay_ms(SHORT_D);
	return;
}

void morse_char(char character){
	switch(character){
  e4:	84 34       	cpi	r24, 0x44	; 68
  e6:	29 f0       	breq	.+10     	; 0xf2 <morse_char+0xe>
  e8:	85 34       	cpi	r24, 0x45	; 69
  ea:	69 f0       	breq	.+26     	; 0x106 <morse_char+0x22>
  ec:	82 33       	cpi	r24, 0x32	; 50
  ee:	f1 f4       	brne	.+60     	; 0x12c <morse_char+0x48>
  f0:	0e c0       	rjmp	.+28     	; 0x10e <morse_char+0x2a>
		case 'D': blink('L'); blink('S'); blink('S'); break;
  f2:	8c e4       	ldi	r24, 0x4C	; 76
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
  f8:	83 e5       	ldi	r24, 0x53	; 83
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
  fe:	83 e5       	ldi	r24, 0x53	; 83
 100:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 104:	13 c0       	rjmp	.+38     	; 0x12c <morse_char+0x48>
		case 'E': blink('S'); break;
 106:	83 e5       	ldi	r24, 0x53	; 83
 108:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 10c:	0f c0       	rjmp	.+30     	; 0x12c <morse_char+0x48>
		case '2': blink('S'); blink('S'); blink('L'); blink('L'); blink('L'); break;
 10e:	83 e5       	ldi	r24, 0x53	; 83
 110:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 114:	83 e5       	ldi	r24, 0x53	; 83
 116:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 11a:	8c e4       	ldi	r24, 0x4C	; 76
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 120:	8c e4       	ldi	r24, 0x4C	; 76
 122:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 126:	8c e4       	ldi	r24, 0x4C	; 76
 128:	0e 94 4b 00 	call	0x96	; 0x96 <blink>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	8b e4       	ldi	r24, 0x4B	; 75
 130:	9d e1       	ldi	r25, 0x1D	; 29
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <morse_char+0x4e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <morse_char+0x58>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <morse_code>:
	}
	_delay_ms(LONG_D);
	return;
}

void morse_code(char *name){
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
 14e:	7c 01       	movw	r14, r24
	for(int i = 0; i < strlen(name); i++)
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	06 c0       	rjmp	.+12     	; 0x162 <morse_code+0x22>
		morse_char(name[i]);
 156:	f7 01       	movw	r30, r14
 158:	81 91       	ld	r24, Z+
 15a:	7f 01       	movw	r14, r30
 15c:	0e 94 72 00 	call	0xe4	; 0xe4 <morse_char>
	_delay_ms(LONG_D);
	return;
}

void morse_code(char *name){
	for(int i = 0; i < strlen(name); i++)
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	f8 01       	movw	r30, r16
 164:	01 90       	ld	r0, Z+
 166:	00 20       	and	r0, r0
 168:	e9 f7       	brne	.-6      	; 0x164 <morse_code+0x24>
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	e0 1b       	sub	r30, r16
 16e:	f1 0b       	sbc	r31, r17
 170:	ce 17       	cp	r28, r30
 172:	df 07       	cpc	r29, r31
 174:	80 f3       	brcs	.-32     	; 0x156 <morse_code+0x16>
		morse_char(name[i]);
	return;
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <main>:
 */
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
 184:	25 9a       	sbi	0x04, 5	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
 186:	2d 98       	cbi	0x05, 5	; 5
	
	char *name = "DE2";
    // Infinite loop
    while (1)
    {
		morse_code(name);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 a0 00 	call	0x140	; 0x140 <morse_code>
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	33 ec       	ldi	r19, 0xC3	; 195
 198:	49 e0       	ldi	r20, 0x09	; 9
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	30 40       	sbci	r19, 0x00	; 0
 19e:	40 40       	sbci	r20, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x20>
 1a4:	00 00       	nop
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i < 7; i++)
 1a8:	a9 f7       	brne	.-22     	; 0x194 <main+0x10>
 1aa:	ee cf       	rjmp	.-36     	; 0x188 <main+0x4>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
