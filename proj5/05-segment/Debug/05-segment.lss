
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001196  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a0  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d6  00000000  00000000  00002bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000329d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
	//(inp pull)
	//na danem bitu adresy nastavi 0
	//na danem bitu o jednu vyssi adresy nastavi 1
    *reg_name &= ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name |= (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	//na danem bitu adresy nastavi 0
    *reg_name &= ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	//na danem bitu adresy nastavi 1
	*reg_name |= (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SEG_init>
	
	

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 00 01 	call	0x200	; 0x200 <SEG_update_shift_regs>
	//SEG_clear();
	
	
	/* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_4ms();
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	8c 7f       	andi	r24, 0xFC	; 252
 100:	85 bd       	out	0x25, r24	; 37
 102:	85 b5       	in	r24, 0x25	; 37
 104:	84 60       	ori	r24, 0x04	; 4
 106:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 108:	ee e6       	ldi	r30, 0x6E	; 110
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24

    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
 11c:	80 81       	ld	r24, Z
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_16>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter0 overflows. Display value on SSD.
 */
ISR(TIMER0_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	static uint8_t position = 0;
	if (position == 0)
 152:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 156:	81 11       	cpse	r24, r1
 158:	06 c0       	rjmp	.+12     	; 0x166 <__vector_16+0x36>
		SEG_update_shift_regs(singles, 0); //first position
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <singles>
 160:	0e 94 00 01 	call	0x200	; 0x200 <SEG_update_shift_regs>
 164:	05 c0       	rjmp	.+10     	; 0x170 <__vector_16+0x40>
	else
		SEG_update_shift_regs(decimals, 1); //second position
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <decimals>
 16c:	0e 94 00 01 	call	0x200	; 0x200 <SEG_update_shift_regs>
	position = !position; //change position (0 1)
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 176:	91 11       	cpse	r25, r1
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_13>:

/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter.
 */
ISR(TIMER1_OVF_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	// number AB = 0-5 0-9
	// LEd counter 0-59
	singles++;
 1ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <singles>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
	if(singles > 9)
 1b2:	8a 30       	cpi	r24, 0x0A	; 10
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <__vector_13+0x1c>
 */
ISR(TIMER1_OVF_vect)
{
	// number AB = 0-5 0-9
	// LEd counter 0-59
	singles++;
 1b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <singles>
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <__vector_13+0x34>
	if(singles > 9)
	{
		singles = 0;
 1bc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <singles>
		decimals++;   
 1c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <decimals>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
		if(decimals > 5)
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <__vector_13+0x30>
	// LEd counter 0-59
	singles++;
	if(singles > 9)
	{
		singles = 0;
		decimals++;   
 1ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <decimals>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_13+0x34>
		if(decimals > 5)
			decimals = 0;
 1d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <decimals>
	}
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	8a e2       	ldi	r24, 0x2A	; 42
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1ea:	67 e0       	ldi	r22, 0x07	; 7
 1ec:	8a e2       	ldi	r24, 0x2A	; 42
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	84 e2       	ldi	r24, 0x24	; 36
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1fe:	08 95       	ret

00000200 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 206:	e8 2f       	mov	r30, r24
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 5f       	subi	r30, 0xFC	; 252
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 210:	e6 2f       	mov	r30, r22
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e0 50       	subi	r30, 0x00	; 0
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 21a:	64 e0       	ldi	r22, 0x04	; 4
 21c:	8b e2       	ldi	r24, 0x2B	; 43
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	8b e2       	ldi	r24, 0x2B	; 43
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <SEG_update_shift_regs+0x3a>
 23e:	00 00       	nop
 240:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if ((segments & 1) == 0)
 242:	10 fd       	sbrc	r17, 0
 244:	06 c0       	rjmp	.+12     	; 0x252 <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 250:	05 c0       	rjmp	.+10     	; 0x25c <SEG_update_shift_regs+0x5c>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	85 e2       	ldi	r24, 0x25	; 37
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <SEG_update_shift_regs+0x5e>
 262:	00 00       	nop

        // Wait 1 us
		_delay_us(1);

        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 264:	67 e0       	ldi	r22, 0x07	; 7
 266:	8b e2       	ldi	r24, 0x2B	; 43
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <SEG_update_shift_regs+0x70>
 274:	00 00       	nop

        // Wait 1 us
		_delay_us(1);

        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 276:	67 e0       	ldi	r22, 0x07	; 7
 278:	8b e2       	ldi	r24, 0x2B	; 43
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "segments"
        segments = segments >> 1;
 280:	16 95       	lsr	r17
 282:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 284:	f1 f6       	brne	.-68     	; 0x242 <SEG_update_shift_regs+0x42>
 286:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position % 2) == 0)
 288:	d0 fd       	sbrc	r29, 0
 28a:	06 c0       	rjmp	.+12     	; 0x298 <SEG_update_shift_regs+0x98>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <SEG_update_shift_regs+0xa2>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	85 e2       	ldi	r24, 0x25	; 37
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <SEG_update_shift_regs+0xa4>
 2a8:	00 00       	nop
		
       // Wait 1 us
       _delay_us(1);

       // Pull CLK high
       GPIO_write_high(&PORTD, SEGMENT_CLK);
 2aa:	67 e0       	ldi	r22, 0x07	; 7
 2ac:	8b e2       	ldi	r24, 0x2B	; 43
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <SEG_update_shift_regs+0xb6>
 2ba:	00 00       	nop

       // Wait 1 us
       _delay_us(1);

       // Pull CLK low
       GPIO_write_low(&PORTD, SEGMENT_CLK);
 2bc:	67 e0       	ldi	r22, 0x07	; 7
 2be:	8b e2       	ldi	r24, 0x2B	; 43
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

		// Shift "position"
		position = position >> 1;
 2c6:	d6 95       	lsr	r29
 2c8:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2ca:	f1 f6       	brne	.-68     	; 0x288 <SEG_update_shift_regs+0x88>
		// Shift "position"
		position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	8b e2       	ldi	r24, 0x2B	; 43
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <SEG_update_shift_regs+0xd8>
 2dc:	00 00       	nop

    // Wait 1 us
	_delay_us(1);
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
